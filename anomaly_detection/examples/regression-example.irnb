{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"3.6.3"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"library(keras)\nlibrary(ggplot2)","metadata":{"execution":{"iopub.status.busy":"2021-05-29T11:24:57.366241Z","iopub.execute_input":"2021-05-29T11:24:57.368038Z","iopub.status.idle":"2021-05-29T11:24:58.884644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data\n\nr = seq(0,2*pi, length=100) - pi\ndat = data.frame(x = r/6, y = 10*sin(r)+rnorm(100))\nbatch = nrow(dat)     # Batch size is data size since all data is in memory\n\nggplot(dat, aes(x=x, y=y)) +\n    geom_point()\n","metadata":{"execution":{"iopub.status.busy":"2021-05-29T11:25:11.290666Z","iopub.execute_input":"2021-05-29T11:25:11.321235Z","iopub.status.idle":"2021-05-29T11:25:11.998134Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# No hidden layers  (straight-line regression model)\n\n# Training inputs and outputs\nX = dat$x        # Must be matrix if more than 1 input variable. Usually you would scale to normalize inputs\nY = dat$y        # Numeric response variable\n\n# Model\nmodel = keras_model_sequential(list(\n          layer_input(shape=1),                          # Shape must match number of inputs\n          layer_dense(units=1, activation=\"linear\") ))   # 1-unit output layer for regression\n\ncompile(model, optimizer=optimizer_adam(lr=0.01), loss=\"mean_squared_error\")\nfit(model, x=X, y=Y, epochs=300, batch_size=batch, verbose=FALSE)\n\nyhat = predict(model, X)      # Fitted values (outputs predicted from training inputs)\nggplot(dat) +\n    geom_point(aes(x=x, y=y)) +\n    geom_line(aes(x=x, y=yhat))\n","metadata":{"execution":{"iopub.status.busy":"2021-05-29T11:25:27.231513Z","iopub.execute_input":"2021-05-29T11:25:27.232977Z","iopub.status.idle":"2021-05-29T11:25:37.824016Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# One hidden layer\n\n# Training inputs and outputs\nX = dat$x        # Must be matrix if more than 1 input variable. Usually you would scale to normalize inputs\nY = dat$y        # Numeric response variable\n\n# Model\nmodel = keras_model_sequential(list(\n          layer_input(shape=1),                          # Shape must match number of inputs\n          layer_dense(units=8, activation=\"relu\"),       # Hidden layer\n          layer_dense(units=1, activation=\"linear\") ))   # 1-unit output layer for regression\n\ncompile(model, optimizer=optimizer_adam(lr=0.01), loss=\"mean_squared_error\")\nfit(model, x=X, y=Y, epochs=300, batch_size=batch, verbose=FALSE)\n\nyhat = predict(model, X)      # Fitted values (outputs predicted from training inputs)\nggplot(dat) +\n    geom_point(aes(x=x, y=y)) +\n    geom_line(aes(x=x, y=yhat))\n","metadata":{"execution":{"iopub.status.busy":"2021-05-29T11:25:50.026387Z","iopub.execute_input":"2021-05-29T11:25:50.027887Z","iopub.status.idle":"2021-05-29T11:25:52.047902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Two hidden layers\n\n# Training inputs and outputs\nX = dat$x        # Must be matrix if more than 1 input variable. Usually you would scale to normalize inputs\nY = dat$y        # Numeric response variable\n\n# Model\nmodel = keras_model_sequential(list(\n          layer_input(shape=1),                          # Shape must match number of inputs\n          layer_dense(units=20, activation=\"relu\"),      # Hidden layer\n          layer_dense(units=20, activation=\"relu\"),      # Hidden layer\n          layer_dense(units=1, activation=\"linear\") ))   # 1-unit output layer for regression\n\ncompile(model, optimizer=optimizer_adam(lr=0.01), loss=\"mean_squared_error\")\nfit(model, x=X, y=Y, epochs=300, batch_size=batch, verbose=FALSE)\n\nyhat = predict(model, X)      # Fitted values (outputs predicted from training inputs)\nggplot(dat) +\n    geom_point(aes(x=x, y=y)) +\n    geom_line(aes(x=x, y=yhat))\n","metadata":{"execution":{"iopub.status.busy":"2021-05-29T11:25:58.906898Z","iopub.execute_input":"2021-05-29T11:25:58.908332Z","iopub.status.idle":"2021-05-29T11:26:00.842188Z"},"trusted":true},"execution_count":null,"outputs":[]}]}